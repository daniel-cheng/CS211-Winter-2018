#version 330

uniform mat4 viewMatrix, projMatrix;
uniform mat3 normalMatrix;

layout (location = 0) in vec4 position;
in vec3 normal;
in vec3 color;

layout(location = 1) in vec2 vertexUV;

out vec3 Color;
out vec3 Normal;
out vec4 Position;

// UV is the texture coordinate of this vertex
out vec2 UV;

uniform vec4 Ambient;
uniform vec3 LightColor;
uniform vec3 LightSpecularColor;
uniform vec3 LightPosition;
uniform float Shininess;
uniform float Strength;
uniform vec3 EyeDirection;

uniform vec3 material_ke; //Material emissive color (default [0, 0, 0])
uniform vec3 material_ka; //Material ambient color (default [0, 0, 0])
uniform vec3 material_kd; //Material diffuse color (default [0, 0, 1])
uniform vec3 material_ks; //Material specular color (default [0, 0, 0])

void main()
{
	Normal = normalize(normalMatrix * normal);
	UV = vertexUV;

	vec3 world_position = position.xyz;					//Casting a higher-dimensional vector to a lower-dimensional vector
 
	vec3 L = normalize(LightPosition - world_position);	//light direction
	vec3 V = normalize(EyeDirection);					//view direction
	vec3 H = normalize(L + V);							//Halfway
 
	float LdotN = max(dot(L, Normal), 0);
	vec3 diffuse = LdotN * LightColor * material_kd;
	vec3 specular = vec3(0.0, 0.0, 0.0);
	if(LdotN > 0.0)
	{
		specular = Strength * pow(max(0, dot(H, Normal)), Shininess) * LightSpecularColor * material_ks;
	}
 
	//Final color to fragment shader
	Color = material_ke + Ambient.xyz * material_ka + diffuse + specular;
 
	//Final vertex position
    gl_Position = projMatrix *  viewMatrix * position;  

}
