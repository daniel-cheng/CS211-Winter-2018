//Phong reflection model; Fragment Shader
#version 330
layout(location = 0) out vec4 outputF;
 
uniform vec4 Ambient;
uniform vec3 LightColor;
uniform vec3 LightPosition;
uniform float Shininess;
uniform float Strength;
uniform vec3 EyeDirection;

uniform float material_kd;//?
uniform float material_ks;//?
 
out float light;
 
in vec3 world_position;
in vec3 Normal;
 
void main(){
 
 
	vec3 L = normalize(LightPosition - world_position);//light direction
	vec3 V = normalize(EyeDirection); //view direction
 
	float LdotN = max(0, dot(L,Normal));
 
	float diffuse = material_kd * LdotN;
 
	float specular = 0;
 
if(LdotN > 0.0)
{
 
	vec3 H = normalize(L + V );//Halfway
	specular = material_ks * pow(max(0, dot(H, Normal)), Shininess);
 
}
 
	//pass light to fragment shader
	//Final light(with white(1,1,1)) would be:
	float light = ke + material_ka + diffuse + specular;
 
	outputF = vec4(light,light,light,1);
}
