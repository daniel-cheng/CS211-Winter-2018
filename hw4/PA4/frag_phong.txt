#version 330

layout(location = 0) out vec4 outputF;
 
uniform vec4 Ambient;
uniform vec3 LightColor;
uniform vec3 LightSpecularColor;
uniform vec3 LightPosition;
uniform float Shininess;
uniform float Strength;
uniform vec3 EyeDirection;

uniform vec3 material_ke; //Material emissive color (default [0, 0, 0])
uniform vec3 material_ka; //Material ambient color (default [0, 0, 0])
uniform vec3 material_kd; //Material diffuse color (default [0, 0, 1])
uniform vec3 material_ks; //Material specular color (default [0, 0, 0])
 
 
in vec3 camera_position;
in vec3 Normal;
in vec2 UV;
in vec3 obj_color;

 
void main(){
 
	vec3 L = normalize(LightPosition);	//light direction
	vec3 V = normalize(EyeDirection);					//view direction
	vec3 H = normalize(L + V);							//Halfway
 
	float LdotN = max(dot(L, Normal), 0);
	vec3 diffuse = LdotN * LightColor * material_kd;
	vec3 specular = vec3(0.0, 0.0, 0.0);
	if(LdotN > 0.0)
	{
		specular = pow(max(0, dot(H, Normal)), Shininess) * LightSpecularColor * material_ks;
	}
 
	//Final color to fragment shader
	vec3 Color = (material_ke + Ambient.xyz * material_ka + diffuse + specular) * obj_color;
 
	outputF = vec4(Color,1);
}